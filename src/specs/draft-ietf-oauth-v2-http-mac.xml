<?xml version="1.0" encoding="UTF-8" ?>
<service primary="IETF" secondary="I-D" id="ietf-oauth-v2-http-mac">
    <title>OAuth 2.0 Message Authentication Code (MAC) Tokens</title>
    <documentation source="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac">This specification describes how to use MAC Tokens in HTTP requests to access OAuth 2.0 protected resources. An OAuth client willing to access a protected resource needs to demonstrate possession of a cryptographic key by using it with a keyed message digest function to the request. The document also defines a key distribution protocol for obtaining a fresh session key.</documentation>
    <oauth-access-token-type def="mac">
        <documentation source="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac#section-4">Authorization servers issue MAC Tokens based on requests from clients.</documentation>
    </oauth-access-token-type>
    <oauth-parameter def="mac_key">
        <documentation source="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac#section-4.1">The session key generated by the authorization server. Note that the lifetime of the session key is equal to the lifetime of the access token.</documentation>
    </oauth-parameter>
    <oauth-parameter def="mac_algorithm">
        <documentation source="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac#section-4.1">The MAC algorithm used to calculate the request MAC. The value MUST be one of "hmac-sha-1", "hmac-sha-256", or a registered extension algorithm name. The authorization server is assumed to know the set of algorithms supported by the client and the resource server. It selects an algorithm that meets the security policies and is supported by both nodes.</documentation>
    </oauth-parameter>
    <oauth-parameter def="kid">
        <documentation source="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac#section-4.1">The name of the key (key id), which is an identifier generated by the resource server. It is RECOMMENDED that the authorization server generates this key id by computing a hash over the access_token, for example using SHA-1, and to encode it in a base64 format.</documentation>
    </oauth-parameter>
</service>